name: Main

on:
  push:
    branches:
      - main

jobs:
  version-check:
    name: Version Check
    runs-on: ubuntu-latest    
    outputs:
      changed: ${{ steps.check.outputs.changed }}
      version: ${{ steps.check.outputs.version }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Use Node.js v16
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Check Version
        id: check
        uses: EndBug/version-check@v2
        with:
          file-name: ./version.json
          diff-search: true
          assume-same-version: new
          token: ${{ secrets.GITHUB_TOKEN }}

  deploy-android:
    name: Deploy Android
    if: needs.version-check.outputs.changed == 'true'
    needs: version-check
    runs-on: ubuntu-latest
    outputs:
      android_build_path: ${{ steps.upload.outputs.android_build_path }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.22.2'
          channel: 'stable'

      - name: Create .env file
        run: |
          touch .env
          echo WEATHER_API_KEY=${{ secrets.WEATHER_API_KEY }} >> .env
          cat .env

      - name: Install Dependencies
        run: flutter pub get

      - name: Parse Version
        id: set_var
        run: |
          versionStr=${{ needs.version-check.outputs.version }}
          parsed=(${versionStr//+/ })
          version=${parsed[0]}
          versionParts=(${version//./ })
          printf -v buildNumber "%d%02d%02d%02d" ${versionParts[0]} ${versionParts[1]} ${versionParts[2]} ${parsed[1]}
          track="internal"
          echo "version=${version}" >> $GITHUB_ENV
          echo "buildNumber=${buildNumber}" >> $GITHUB_ENV
          echo "track=${track}" >> $GITHUB_ENV

      - name: Build App Bundle
        run: flutter build appbundle --build-name=${{ env.version }} --build-number=${{ env.buildNumber }}

      - name: Sign App Bundle
        uses: r0adkll/sign-android-release@v1   
        id: sign_app
        with:
          releaseDirectory: build/app/outputs/bundle/release/
          signingKeyBase64: ${{ secrets.ANDROID_KEYSTORE_FILE_BASE64 }}
          alias: ${{ secrets.ANDROID_SIGNING_KEY_ALIAS }}         
          keyStorePassword: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          keyPassword: ${{ secrets.ANDROID_SIGNING_KEY_PASSWORD }}

      - name: Upload Artifacts
        run: |
          echo -e "\r  release: com.halfseed.climature@${{needs.version-check.outputs.version}}" &>> pubspec.yaml

      - name: Publish to Play Store
        uses: r0adkll/upload-google-play@v1.0.18  
        with:
          serviceAccountJsonPlainText: ${{ secrets.ANDROID_SERVICE_ACCOUNT_JSON }}
          packageName: com.halfseed.climature     
          releaseFiles: 'build/app/outputs/bundle/release/app-release.aab'       
          track: ${{steps.set_var.outputs.track}}
          status: draft

      - name: Create Android Build ZIP
        id: upload
        run: |
          cd build/app/outputs/bundle/release/
          zip -r android-release.zip app-release.aab
          echo "android_build_path=build/app/outputs/bundle/release/android-release.zip" >> $GITHUB_ENV

      - name: Upload Android Artifact
        uses: actions/upload-artifact@v2
        with:
          name: android-release
          path: build/app/outputs/bundle/release/android-release.zip

  deploy-ios:
    name: Deploy iOS
    if: needs.version-check.outputs.changed == 'true'
    needs: version-check
    runs-on: macos-latest
    env:
      APP_STORE_CONNECT_ISSUER_ID: ${{ vars.APP_STORE_CONNECT_ISSUER_ID }}
      APP_STORE_CONNECT_KEY_IDENTIFIER: ${{ vars.APP_STORE_CONNECT_KEY_IDENTIFIER }}
      APP_STORE_CONNECT_PRIVATE_KEY: ${{ secrets.APP_STORE_CONNECT_PRIVATE_KEY }}
      DIST_CERTIFICATE: ${{ secrets.DIST_CERTIFICATE }}
      DIST_CERTIFICATE_PASSWORD: ${{ secrets.DIST_CERTIFICATE_PASSWORD }}
      DIST_PROFILE: ${{ secrets.DIST_PROFILE }}
      APP_STORE_APP_ID: ${{ vars.APP_STORE_APP_ID }}
    outputs:
      ios_build_path: ${{ steps.upload.outputs.ios_build_path }}
    steps:
      - uses: actions/checkout@v3

      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.22.2"
          channel: 'stable'
          cache: true

      - name: Install Codemagic CLI tools
        run: pip install codemagic-cli-tools

      - name: Set up keychain
        run: keychain initialize

      - name: Set up Provisioning profiles
        run: |
          PROFILES_HOME="$HOME/Library/MobileDevice/Provisioning Profiles"
          mkdir -p "$PROFILES_HOME"
          PROFILE_PATH="$(mktemp "$PROFILES_HOME"/$(uuidgen).mobileprovision)"
          echo ${DIST_PROFILE} | base64 --decode > "$PROFILE_PATH"
          echo "Saved provisioning profile $PROFILE_PATH"

      - name: Set up signing certificate
        run: |
          echo $DIST_CERTIFICATE | base64 --decode > /tmp/certificate.p12
          keychain add-certificates --certificate /tmp/certificate.p12 --certificate-password $DIST_CERTIFICATE_PASSWORD

      - name: Set up code signing settings on Xcode project
        run: xcode-project use-profiles

      - name: Create .env file
        run: |
          touch .env
          echo WEATHER_API_KEY=${{ secrets.WEATHER_API_KEY }} >> .env
          cat .env

      - name: Parse Version
        id: set_var
        run: |
          versionStr=${{ needs.version-check.outputs.version }}
          parsed=(${versionStr//+/ })
          version=${parsed[0]}
          echo "version=${version}" >> $GITHUB_ENV
          echo "buildNumber=${parsed[1]}" >> $GITHUB_ENV

      - name: Build ipa for distribution
        run: flutter build ipa --release --export-options-plist=$HOME/export_options.plist --build-name=${{ env.version }} --build-number=${{ env.buildNumber }}

      - name: Publish the app to App Store Connect
        run: |
          APP_FILE=$(find $(pwd) -name "*.ipa")
          app-store-connect publish --path "$APP_FILE"

      - name: Create iOS Build ZIP
        id: upload
        run: |
          cd build/ios/ipa
          zip -r ios-release.zip *.ipa
          echo "ios_build_path=build/ios/ipa/ios-release.zip" >> $GITHUB_ENV

      - name: Upload iOS Artifact
        uses: actions/upload-artifact@v2
        with:
          name: ios-release
          path: build/ios/ipa/ios-release.zip

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    if: needs.version-check.outputs.changed == 'true'
    needs: [version-check, deploy-ios, deploy-android]
  
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.version-check.outputs.version }}
          release_name: Release ${{ needs.version-check.outputs.version }}
          body: |
            ## Changes
            - Automated release for version ${{ needs.version-check.outputs.version }}
          draft: false
          prerelease: false

      - name: Download Android Artifact
        uses: actions/download-artifact@v2
        with:
          name: android-release
          path: .

      - name: Download iOS Artifact
        uses: actions/download-artifact@v2
        with:
          name: ios-release
          path: .

      - name: Upload Android Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./android-release.zip
          asset_name: android-release.zip
          asset_content_type: application/zip

      - name: Upload iOS Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./ios-release.zip
          asset_name: ios-release.zip
          asset_content_type: application/zip
